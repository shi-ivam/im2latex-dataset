#!/bin/python2
# coding: utf-8

# ### Generate Formula List
# &copy; Copyright 2017 Sumeet S Singh
# 
#     This file is part of im2latex-dataset.
# 
#     This program is free software: you can redistribute it and/or modify
#     it under the terms of the Affero GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
# 
#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     Affero GNU General Public License for more details.
# 
#     You should have received a copy of the Affero GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

"""
This script generates the formula list in the same format as im2latex_formulas.lst.
However, unlike the file im2latex_formulas.lst which is generated by the formula2img.py, this script actually
goes through the list of files present on disk and compiles their list. Therefore it is more reliable than the
output from formula2img.py which can misalign formulas with file-names (see the code).

It also removes duplicates based on the hash value produced.
"""

# In[ ]:

import os
import argparse
import sys
import pandas as pd
import hashlib
from six.moves import cPickle as pickle

MAP_FILENAME = 'im2latex_dataset_map.df.pkl'

parser = argparse.ArgumentParser(description='Generate Formula List: Generates a text file mapping latex formulas taken from a given input file and corresponding image files present in a given folder.')
parser.add_argument('formula_file',
                    help='Path of text file with one latex formula per line')
parser.add_argument('image_dir',
                    help='Directory/folder where the generated image files are present')
parser.add_argument('-o', '--output_dir',
                    default='./', type=str, dest='output_dir',
                    help='Path to directory where the output file (%s) will be saved'%MAP_FILENAME)
parser.add_argument('-r', '--rendering_setup', dest='rendering_setup',
                    default='basic', help='Name of rendering setup files to cull. Defaults to "basic".')
parser.add_argument('-w', action="store_true", dest='overwrite', default=False,
                    help='Overwrite the output file even if it exists. Without this flag the output file will not be overwritten if it exits')
parser.add_argument('-v', action="store_true", dest='verbose', default=False,
                    help='Overwrite the output file even if it exists. Without this flag the output file will not be overwritten if it exits')

args = parser.parse_args()

formula_file = args.formula_file
image_dir = args.image_dir
map_file = os.path.join(args.output_dir, MAP_FILENAME)
setup = args.rendering_setup
ovw = args.overwrite
verbose = args.verbose

def assertFiles():
    if not ovw and os.path.exists(map_file):
        print('%s already exists. Specify the -w flag to overwrite'%(map_file,))
        exit(1)

# MAX_NUMBER = 150*1000
data_map = []
assertFiles()
formula_names = []
missing = 0
total = 0
dupes = 0
bad = 0
good = 0

# Load the formula_file using the same code that formula2img.py uses so that we get the same formula list.
# formulas = open(formula_file).read().split("\n")[:MAX_NUMBER]
formulas = open(formula_file).read().split("\n")
for formula in formulas:
    total += 1
    try:
        formula = formula.encode('utf-8')
        formula_name = hashlib.sha1(formula).hexdigest()[:15] + '_' + setup
        filename = formula_name + '.png'
    except Exception as e:
        bad += 1
        print('Error processing formula line "%s". Moving on ...'%(formula,))
        continue

    if formula_name not in formula_names:
        formula_names.append(formula_name)
        filepath = os.path.join(image_dir, filename)
        if (os.path.isfile(filepath) and (os.lstat(filepath).st_size > 0)):
            good += 1
            data_map.append([filename, formula_name, formula])
        else:
            missing += 1
            if verbose:
                print("Didn't find file "+filepath)
    else:
        dupes += 1
        if verbose:
            print ('Ignoring duplicate formula %s'%formula_name)

assert good == len(data_map)
mapDF = pd.DataFrame(data_map, columns=['image', 'formula_name', 'latex'])
assertFiles()
mapDF.to_pickle(map_file)
print('Wrote %s'%(map_file,))
print('Dataframe shape=%s'%(mapDF.shape,))
print('Total in input file=%d, Final Number=%d, Missing Images=%d, Duplicates=%d, Errored=%d'%(total, good, missing, dupes, bad))
if (good + missing + dupes + bad) != total:
    print('WARNING: Numbers dont add up :(')
#mapDF.latex.to_csv(FORMULA_LIST_FILE, sep=" ", index=True, header=True)
#print('Wrote %s'%(FORMULA_LIST_FILE,))
#formulaDF = mapDF.assign(setup=setup)
#formulaDF[['formula_name', 'setup']].to_csv(DATASET_LIST_FILE, sep=" ", header=True, index=True)
#print('Wrote %s'%(DATASET_LIST_FILE,))
